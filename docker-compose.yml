version: '3'

services:
  # Redis for Tyk
  redis:
    image: redis:alpine
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Backend Service
  http-service:
    build:
      context: .
      dockerfile: http-service/Dockerfile
    environment:
      - PORT=8000
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    # Use host mode for better performance during benchmarks
    # This exposes the service directly on host port 8000
    ports:
      - "8000:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Tyk Gateway
  tyk-gateway:
    build:
      context: ./tyk
    ports:
      - "8080:8080"
    networks:
      - api-network
    depends_on:
      http-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # KrakenD Gateway
  krakend:
    build:
      context: ./krakend
    ports:
      - "8081:8081"
    networks:
      - api-network
    depends_on:
      http-service:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Benchmark service
  benchmark:
    build:
      context: .
      dockerfile: benchmark/Dockerfile
    networks:
      - api-network
    depends_on:
      tyk-gateway:
        condition: service_started
      krakend:
        condition: service_started
    volumes:
      - ./results:/results

networks:
  api-network:
    driver: bridge